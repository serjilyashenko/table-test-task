{"version":3,"sources":["data/index.js","components/TargetList/index.js","const/storage.js","containers/withStorage.js","containers/ListContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["TargetList","_ref","columns","data","rowSelection","pagination","selectedKeys","selectedRowKeys","hasSelected","length","react_default","a","createElement","className","es_button","type","onClick","onChange","disabled","concat","table","dataSource","title","dataIndex","i","push","key","name","age","address","ListContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onStorageUpdate","onStorageChange","state","onPageChange","page","setState","onSelectedChange","storage","Array","isArray","_this$state","current","components_TargetList","React","Component","withStorage","JSON","parse","ls","get","e","console","warn","assign","set","stringify","App","containers_ListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf8fcbbc.chunk.js","sourcesContent":["export const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name'\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age'\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address'\n  }\n];\n\nexport const data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`\n  });\n}\n","import React from 'react';\nimport { Button, Table } from 'antd';\nimport './styles.css';\n\nexport const TargetList = ({ columns, data, rowSelection, pagination }) => {\n  const selectedKeys = rowSelection.selectedRowKeys;\n  const hasSelected = selectedKeys.length > 0;\n  const onReset = () => rowSelection.onChange([]);\n\n  return (\n    <div>\n      <div className=\"target-list-button\">\n        <Button type=\"primary\" onClick={onReset} disabled={!hasSelected}>\n          Reload\n        </Button>\n        <span className=\"target-list-button-title\">{hasSelected ? `Selected ${selectedKeys.length} items` : ''}</span>\n      </div>\n      <Table rowSelection={rowSelection} columns={columns} dataSource={data} pagination={pagination} />\n    </div>\n  );\n};\n\nexport default TargetList;\n","export const TARGET_LIST = 'target-list';\n","import React from 'react';\nimport ls from 'local-storage';\n\nexport const withStorage = key => Component => props => {\n  const onChange = data => ls.set(key, JSON.stringify(data));\n  let storage = null;\n\n  try {\n    storage = JSON.parse(ls.get(key));\n  } catch (e) {\n    console.warn(`>> incorrect localStorage data for key=${key}; ${e}`);\n  }\n\n  return <Component {...props} storage={storage} onStorageChange={onChange} />;\n};\n","import React from 'react';\nimport TargetList from '../../components/TargetList';\nimport { withStorage } from '../withStorage';\nimport { columns, data } from '../../data/index';\nimport { TARGET_LIST } from '../../const/storage';\n\nclass ListContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    let selectedKeys = [];\n\n    const { storage } = props;\n    selectedKeys = Array.isArray(storage) ? storage : [];\n\n    this.state = { selectedKeys, page: 1 };\n  }\n\n  onStorageUpdate = () => this.props.onStorageChange(this.state.selectedKeys);\n\n  onPageChange = page => this.setState({ page });\n\n  onSelectedChange = selectedKeys => this.setState({ selectedKeys }, this.onStorageUpdate);\n\n  render() {\n    const { selectedKeys, page } = this.state;\n    const pagination = { current: page, onChange: this.onPageChange };\n    const rowSelection = { selectedRowKeys: selectedKeys, onChange: this.onSelectedChange };\n\n    return (\n      <div className=\"App\">\n        <TargetList data={data} columns={columns} rowSelection={rowSelection} pagination={pagination} />\n      </div>\n    );\n  }\n}\n\nexport default withStorage(TARGET_LIST)(ListContainer);\n","import React from 'react';\nimport ListContainer from './containers/ListContainer';\nimport './App.css';\n\nfunction App() {\n  return <ListContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}